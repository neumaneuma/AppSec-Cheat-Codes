6a7,9
>     if not input_is_permitted_through_blocklist(custom_url):
>         return (f"Failure: supplied url is invalid ({custom_url})", 400)
> 
14a18,72
> 
> # This is what a blocklist implementation should look like
> def input_is_permitted_through_blocklist(url):
>     # Attempt to see if url is a valid ip address first in order to avoid performing a dns look up if possible
>     ip = attempt_ip_address_parse(url)
>     if ip != None:
>         is_global = ip.is_global
>         LOG.debug(
>             f"IP address successfully parsed on first attempt: {ip}. Returning {is_global} for is url valid"
>         )
>         return is_global
> 
>     parsed_url = urlparse(url)
>     if is_invalid_scheme(parsed_url.scheme):
>         LOG.debug(f"Invalid schema: {parsed_url.scheme}")
>         return False
> 
>     # If urlparse is unable to correctly parse the url, then everything will be in the path
>     hostname = parsed_url.hostname if parsed_url.hostname != None else parsed_url.path
>     dns_ip = get_ip_address_from_dns(hostname)
>     LOG.debug(f"Response from DNS: {dns_ip}")
> 
>     ip = attempt_ip_address_parse(dns_ip)
>     if ip == None:
>         LOG.debug("Unable to parse the IP address from the DNS response")
>         return False
> 
>     is_global = ip.is_global
>     LOG.debug(
>         f"Returning {is_global} for is url valid. Is private: {ip.is_private}")
>     return is_global
> 
> 
> def attempt_ip_address_parse(address):
>     try:
>         ip_addr = ipaddress.ip_address(address)
>         return ip_addr
>     except ValueError:
>         return None
> 
> 
> def is_invalid_scheme(scheme):
>     return not (scheme == "https" or scheme == "http" or scheme == "")
> 
> 
> def get_ip_address_from_dns(qname):
>     try:
>         q = dns.message.make_query(qname, dns.rdatatype.A)
>         r = dns.query.tls(q, DNS_RESOLVER, timeout=TIMEOUT)
>         if len(r.answer) > 0:
>             return str(r.answer[0][0])
>     except Exception as e:
>         LOG.debug("Original address: " + qname)
>         LOG.debug(e)
>     return qname
